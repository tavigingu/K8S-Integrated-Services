# ============================================
# Apache HTTPD Configuration - Reverse Proxy
# ============================================

# Încărcăm modulele necesare
LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule headers_module modules/mod_headers.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule access_compat_module modules/mod_access_compat.so
LoadModule unixd_module modules/mod_unixd.so

# Setări generale pentru server
ServerName localhost
Listen 99

# Configurare loguri
LogLevel debug proxy:trace5
ErrorLog "/usr/local/apache2/logs/error_log"
CustomLog "/usr/local/apache2/logs/access_log" combined

# Configurație VirtualHost
<VirtualHost *:99>
    ServerAdmin webmaster@localhost
    ServerName localhost
    ServerAlias *

    # Permite toate conexiunile prin proxy
    <Proxy *>
        Require all granted
        Allow from all
    </Proxy>

    # Setări proxy invers
    ProxyRequests Off
    ProxyPreserveHost On
    ProxyVia Full

    ProxyPass / http://localhost:8080/
    ProxyPassReverse / http://localhost:8080/

    # Suport WebSocket
    RewriteEngine On
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule /(.*) ws://localhost:8080/$1 [P,L]

    # Setări CORS
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    Header set Access-Control-Allow-Headers "Content-Type, Authorization"

    # Headere forwarding
    RequestHeader set X-Real-IP "%{REMOTE_ADDR}e"
    RequestHeader append X-Forwarded-For "%{REMOTE_ADDR}e"
    RequestHeader set X-Forwarded-Proto "http"
    RequestHeader set Host "%{HTTP_HOST}e"

    # Timeout-uri
    ProxyTimeout 300
    KeepAlive On
    KeepAliveTimeout 60
</VirtualHost>


# # Încărcăm modulele necesare
# LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
# LoadModule proxy_module modules/mod_proxy.so
# LoadModule proxy_http_module modules/mod_proxy_http.so
# LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
# LoadModule rewrite_module modules/mod_rewrite.so
# LoadModule headers_module modules/mod_headers.so
# LoadModule log_config_module modules/mod_log_config.so
# LoadModule unixd_module modules/mod_unixd.so

# # Configurăm serverul
# ServerName localhost
# Listen 99
# User daemon
# Group daemon
# LogLevel debug proxy:trace5

# # Configurăm reverse proxy
# <VirtualHost *:99>
#     ServerName localhost

#     # Proxy pentru toate cererile către aplicația Go pe portul 8080
#     ProxyPreserveHost On
#     ProxyPass / http://localhost:8080/
#     ProxyPassReverse / http://localhost:8080/

#     # Suport pentru WebSocket
#     RewriteEngine On
#     RewriteCond %{HTTP:Upgrade} =websocket [NC]
#     RewriteCond %{HTTP:Connection} upgrade [NC]
#     RewriteRule /(.*) ws://localhost:8080/$1 [P,L]

#     # Setăm headere echivalente cu cele din Nginx
#     RequestHeader set X-Real-IP "%{REMOTE_ADDR}e"
#     RequestHeader append X-Forwarded-For "%{REMOTE_ADDR}e"
#     RequestHeader set X-Forwarded-Proto "http"
#     RequestHeader set Host "%{HTTP_HOST}e"

#     # Loguri
#     LogLevel debug
#     ErrorLog /dev/stderr
#     CustomLog /dev/stdout combined
# </VirtualHost>
